package command

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	passwords "password-manager/pkg/passwords"

	"strings"
)

const FilePath = "./internal/passwordsStorage/passwords.json"

func StorePasswords(store *passwords.PasswordStore) {
	file, err := os.OpenFile(FilePath, os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: %v", err)
		return
	}

	defer file.Close()

	var passwordsInStore []passwords.Password

	stat, err := file.Stat()
	if err != nil {
		fmt.Printf("–ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ–Ω—Ñ–æ : %v /n", err)
		return
	}

	if stat.Size() != 0 {
		decoder := json.NewDecoder(file)
		err = decoder.Decode(&passwordsInStore)
		if err != nil {
			fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è json: %v\n", err)
			return
		}
	}

	for _, password := range store.Passwords {
		passwordsInStore = append(passwordsInStore, passwords.Password{
			Name:  password.Name,
			Value: password.Value,
		})
	}
	file.Truncate(0)
	file.Seek(0, 0)

	data, err := json.MarshalIndent(passwordsInStore, "", " ")
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å—ñ–Ω–≥—É –¥–∂–µ–π—Å–æ–Ω %v", err)
		return
	}

	_, err = file.Write(data)

	if err != nil {
		fmt.Printf("–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª %v ", err)
		return

	}

}

func SavePassword(store *passwords.PasswordStore) {
	scanner := bufio.NewScanner(os.Stdin)
	var name, password string
	for {
		fmt.Println("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –ø–∞—Ä–æ–ª—è ====>")

		if !scanner.Scan() {
			fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è: %v", scanner.Err())
			return
		}

		name = strings.TrimSpace(scanner.Text())
		if PasswordExists(name) {
			fmt.Printf("–ü–∞—Ä–æ–ª—å —Å –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î - %v\n", name)
			return
		}

		if name != "" {
			break
		} else {
			fmt.Printf("–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é \n")
		}

	}

	for {
		fmt.Println("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å ====>")

		if !scanner.Scan() {
			fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è: %v", scanner.Err())
			return
		}

		password = strings.TrimSpace(scanner.Text())

		if password != "" {
			break
		} else {
			fmt.Printf("–ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
		}

	}

	store.SavePassword(name, password)
	StorePasswords(store)
	fmt.Println("\n‚úÖ   –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—â–Ω–æ –∑–±–µ—Ä–µ–∂–Ω–µ–æ")
}

func ShowPasswords() {
	file, err := os.Open(FilePath)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: %v\n", err)
		return
	}

	defer file.Close()
	var passwords []passwords.Password
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&passwords)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: %v\n", err)
		return
	}

	if len(passwords) == 0 {
		fmt.Println("üü¢  –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ ")
	} else {
		fmt.Println("üü¢  –ü–∞—Ä–æ–ª—ñ, —â–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ —Å–ø–∏—Å–æ–∫: ")
		for _, password := range passwords {
			fmt.Printf("Name: %s, Password: %s\n", password.Name, password.Value)
		}
	}

}

func GetPassword() {
	scanner := bufio.NewScanner(os.Stdin)
	fmt.Println("–í–í–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞—Ä–æ–ª—è, —â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏")
	if !scanner.Scan() {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: %v", scanner.Err())
		return
	}

	name := strings.TrimSpace(scanner.Text())

	file, err := os.Open(FilePath)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: %v\n", err)
		return
	}

	defer file.Close()
	var passwords []passwords.Password
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&passwords)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: %v\n", err)
		return
	}

	found := false
	for _, password := range passwords {
		if password.Name == name {
			fmt.Printf("–ü–∞—Ä–æ–ª—å –¥–ª—è %s: %s\n", name, password.Value)
			found = true
			break
		}
	}

	if !found {
		fmt.Printf("–ü–∞—Ä–æ–ª—å –∑ –Ω–∞–∑–≤–æ—é '%s' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n", name)
	}
}

func PasswordExists(name string) bool {

	file, err := os.Open(FilePath)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: %v\n", err)
		return false
	}

	defer file.Close()

	var passwordsInStore []passwords.Password
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&passwordsInStore)
	if err != nil {
		fmt.Printf("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: %v\n", err)
		return false
	}

	for _, p := range passwordsInStore {
		if p.Name == name {
			return true
		}
	}
	return false
}
